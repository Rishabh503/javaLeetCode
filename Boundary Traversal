
//boundary traversal with examples 
class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int val) {
        this.val = val;
    }
}

public class Main {
    public static boolean isLeaf(TreeNode node) {
        return node.left == null && node.right == null;
    }
    public static void leftNodes(TreeNode root){
        if(root==null || isLeaf(root)){
            return;
        }
        System.out.println(root.val);
        if(root.left!=null) leftNodes(root.left);
        else if(root.right!=null) leftNodes(root.right);
    }
    public  static void rightNodes(TreeNode root){
        if(root==null || isLeaf(root)){
            return;
        }
        if(root.right!=null) rightNodes(root.right);
        else if(root.left!=null) rightNodes(root.left);
        System.out.println(root.val);
    }
    
    public static void leaves(TreeNode root){
        if(root==null) return;
        if(isLeaf(root)){
            System.out.println(root.val);
            return;
        }
        leaves(root.left);
        leaves(root.right);
    }
   
    public static void boundaryTraversal(TreeNode root) {
        if(root==null) return ;
        if(!isLeaf(root)) {
            System.out.println(root.val);
        }
        // take the left nodes 
        leftNodes(root.left);
        // take the leaves 
        leaves(root);
        // take the reight nodes
        rightNodes(root.right);
        System.out.println("Boundary traversal  implemented.");
        return;
    }

    // Sample Trees to test
    public static void main(String[] args) {
        System.out.println("Test Case 1:");
        TreeNode root1 = new TreeNode(1);
        root1.left = new TreeNode(2);
        root1.right = new TreeNode(3);
        root1.left.left = new TreeNode(4);
        root1.left.right = new TreeNode(5);
        root1.right.left = new TreeNode(6);
        root1.right.right = new TreeNode(7);
        boundaryTraversal(root1); // Expected boundary: 1 2 4 5 6 7 3

        System.out.println("\nTest Case 2:");
        TreeNode root2 = new TreeNode(1);
        root2.left = new TreeNode(2);
        root2.left.left = new TreeNode(3);
        root2.left.left.left = new TreeNode(4);
        boundaryTraversal(root2); // Expected boundary: 1 2 3 4

        System.out.println("\nTest Case 3:");
        TreeNode root3 = new TreeNode(20);
        root3.left = new TreeNode(8);
        root3.right = new TreeNode(22);
        root3.left.left = new TreeNode(4);
        root3.left.right = new TreeNode(12);
        root3.left.right.left = new TreeNode(10);
        root3.left.right.right = new TreeNode(14);
        root3.right.right = new TreeNode(25);
        boundaryTraversal(root3); // Expected boundary: 20 8 4 10 14 25 22
    }
}
